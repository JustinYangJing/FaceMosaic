#version 300 es
precision highp float;
precision highp int;
precision highp sampler2D;
out vec4 FragColor;

uniform sampler2D tex;
uniform vec2 faceBounds[8]; //最多4个face的，2*i 存放左下角的纹理坐标，2*i+1存放右上角的纹理坐标，他们可以组成一个四边形
uniform int faces; //侦测到face个数
in vec2 texCoord;

const float kernel[121] = float[](
                                  0.008252074,  0.008255788,  0.008258678,  0.008260743,  0.008261982,  0.008262395,  0.008261982,  0.008260743,  0.008258678,  0.008255788,  0.008252074,

                                  0.008255788,  0.008259504,  0.008262395,  0.0082644615,  0.008265701,  0.008266115,  0.008265701,  0.0082644615,  0.008262395,  0.008259504,  0.008255788,

                                  0.008258678,  0.008262395,  0.008265288,  0.008267354,  0.008268595,  0.008269008,  0.008268595,  0.008267354,  0.008265288,  0.008262395,  0.008258678,

                                  0.008260743,  0.0082644615,  0.008267354,  0.008269422,  0.008270662,  0.008271076,  0.008270662,  0.008269422,  0.008267354,  0.0082644615,  0.008260743,

                                  0.008261982,  0.008265701,  0.008268595,  0.008270662,  0.008271903,  0.008272316,  0.008271903,  0.008270662,  0.008268595,  0.008265701,  0.008261982,

                                  0.008262395,  0.008266115,  0.008269008,  0.008271076,  0.008272316,  0.00827273,  0.008272316,  0.008271076,  0.008269008,  0.008266115,  0.008262395,

                                  0.008261982,  0.008265701,  0.008268595,  0.008270662,  0.008271903,  0.008272316,  0.008271903,  0.008270662,  0.008268595,  0.008265701,  0.008261982,

                                  0.008260743,  0.0082644615,  0.008267354,  0.008269422,  0.008270662,  0.008271076,  0.008270662,  0.008269422,  0.008267354,  0.0082644615,  0.008260743,

                                  0.008258678,  0.008262395,  0.008265288,  0.008267354,  0.008268595,  0.008269008,  0.008268595,  0.008267354,  0.008265288,  0.008262395,  0.008258678,

                                  0.008255788,  0.008259504,  0.008262395,  0.0082644615,  0.008265701,  0.008266115,  0.008265701,  0.0082644615,  0.008262395,  0.008259504,  0.008255788,

                                  0.008252074,  0.008255788,  0.008258678,  0.008260743,  0.008261982,  0.008262395,  0.008261982,  0.008260743,  0.008258678,  0.008255788,  0.008252074
                                  );
const vec2 offsets[121] = vec2[](
                                 vec2(-0.025,0.025),vec2(-0.02,0.025),vec2(-0.015,0.025),vec2(-0.01,0.025),vec2(-0.005,0.025),vec2(0.0,0.025),vec2(0.005,0.025),vec2(0.01,0.025),vec2(0.015,0.025),vec2(0.02,0.025),vec2(0.025,0.025),vec2(-0.025,0.02),vec2(-0.02,0.02),vec2(-0.015,0.02),vec2(-0.01,0.02),vec2(-0.005,0.02),vec2(0.0,0.02),vec2(0.005,0.02),vec2(0.01,0.02),vec2(0.015,0.02),vec2(0.02,0.02),vec2(0.025,0.02),vec2(-0.025,0.015),vec2(-0.02,0.015),vec2(-0.015,0.015),vec2(-0.01,0.015),vec2(-0.005,0.015),vec2(0.0,0.015),vec2(0.005,0.015),vec2(0.01,0.015),vec2(0.015,0.015),vec2(0.02,0.015),vec2(0.025,0.015),vec2(-0.025,0.01),vec2(-0.02,0.01),vec2(-0.015,0.01),vec2(-0.01,0.01),vec2(-0.005,0.01),vec2(0.0,0.01),vec2(0.005,0.01),vec2(0.01,0.01),vec2(0.015,0.01),vec2(0.02,0.01),vec2(0.025,0.01),vec2(-0.025,0.005),vec2(-0.02,0.005),vec2(-0.015,0.005),vec2(-0.01,0.005),vec2(-0.005,0.005),vec2(0.0,0.005),vec2(0.005,0.005),vec2(0.01,0.005),vec2(0.015,0.005),vec2(0.02,0.005),vec2(0.025,0.005),vec2(-0.025,0.0),vec2(-0.02,0.0),vec2(-0.015,0.0),vec2(-0.01,0.0),vec2(-0.005,0.0),vec2(0.0,0.0),vec2(0.005,0.0),vec2(0.01,0.0),vec2(0.015,0.0),vec2(0.02,0.0),vec2(0.025,0.0),vec2(-0.025,-0.005),vec2(-0.02,-0.005),vec2(-0.015,-0.005),vec2(-0.01,-0.005),vec2(-0.005,-0.005),vec2(0.0,-0.005),vec2(0.005,-0.005),vec2(0.01,-0.005),vec2(0.015,-0.005),vec2(0.02,-0.005),vec2(0.025,-0.005),vec2(-0.025,-0.01),vec2(-0.02,-0.01),vec2(-0.015,-0.01),vec2(-0.01,-0.01),vec2(-0.005,-0.01),vec2(0.0,-0.01),vec2(0.005,-0.01),vec2(0.01,-0.01),vec2(0.015,-0.01),vec2(0.02,-0.01),vec2(0.025,-0.01),vec2(-0.025,-0.015),vec2(-0.02,-0.015),vec2(-0.015,-0.015),vec2(-0.01,-0.015),vec2(-0.005,-0.015),vec2(0.0,-0.015),vec2(0.005,-0.015),vec2(0.01,-0.015),vec2(0.015,-0.015),vec2(0.02,-0.015),vec2(0.025,-0.015),vec2(-0.025,-0.02),vec2(-0.02,-0.02),vec2(-0.015,-0.02),vec2(-0.01,-0.02),vec2(-0.005,-0.02),vec2(0.0,-0.02),vec2(0.005,-0.02),vec2(0.01,-0.02),vec2(0.015,-0.02),vec2(0.02,-0.02),vec2(0.025,-0.02),vec2(-0.025,-0.025),vec2(-0.02,-0.025),vec2(-0.015,-0.025),vec2(-0.01,-0.025),vec2(-0.005,-0.025),vec2(0.0,-0.025),vec2(0.005,-0.025),vec2(0.01,-0.025),vec2(0.015,-0.025),vec2(0.02,-0.025),vec2(0.025,-0.025)
                                 );

vec4 blur(){
    vec3 color = vec3(0.0);
    for (int i = 0; i < 121; i++) {
        vec4 tColor = texture(tex,texCoord.st + offsets[i]);
        color += vec3(tColor.bgr) * kernel[i];
    }   
    return vec4(color,1.0);
}


void main()
{
    vec4 color = texture(tex,texCoord);
    FragColor = vec4(color.b,color.g,color.r,1.0);
   

    int realFaces = min(faces,4);
    for (int i = 0; i < realFaces; i++) {
        if (texCoord.x > faceBounds[2*i].x && texCoord.x < faceBounds[2*i+1].x && texCoord.y > faceBounds[2*i].y && texCoord.y < faceBounds[2*i+1].y) {
            FragColor = blur();
        }
    }
}

